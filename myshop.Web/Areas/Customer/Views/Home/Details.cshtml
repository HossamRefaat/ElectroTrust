@model ShoppingCart

@section Styles {
    <style>
        .product-gallery img#mainProductImage {
            border: 1px solid #dee2e6; /* Light border like cards */
            margin-bottom: 1rem;
            /* Ensure main image scales nicely */
            max-height: 500px; /* Optional: Limit max height */
            object-fit: contain; /* Show full image, maintain aspect ratio */
            width: 100%;
            background-color: #fff; /* Ensure white background for contain */
        }

        .product-thumbnails {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem; /* Spacing between thumbnails */
        }

            .product-thumbnails img {
                cursor: pointer;
                opacity: 0.7;
                transition: opacity 0.2s ease-in-out;
                width: 80px; /* Thumbnail size */
                height: 80px; /* Thumbnail size */
                object-fit: cover; /* Make thumbnails look neat */
                border: 1px solid #dee2e6;
                padding: 2px; /* Small padding inside border */
            }

                .product-thumbnails img:hover,
                .product-thumbnails img.active {
                    opacity: 1;
                    border-color: #0d6efd; /* Primary color border on active/hover */
                }

        .product-price {
            font-size: 1.75rem;
            font-weight: 500;
            color: #198754; /* Green color for price */
        }

        .quantity-input {
            max-width: 70px;
            text-align: center;
        }

        .stock-status.in-stock {
            color: #198754; /* Green */
            font-weight: 500;
        }

        .stock-status.out-of-stock {
            color: #dc3545; /* Red */
            font-weight: 500;
        }

        /* For WebKit browsers like Chrome, Safari, Edge, Opera */
        input[type=number]::-webkit-outer-spin-button,
        input[type=number]::-webkit-inner-spin-button {
            -webkit-appearance: none; /* Hide the spinners */
            margin: 0; /* Remove any default margin */
        }

        /* For Firefox */
        input[type=number] {
            -moz-appearance: textfield; /* Style as a text field, hiding spinners */
        }
    </style>
}

@* --- Main Product Details Section --- *@
<div class="container py-5">

    <form method="post" asp-action="Details">
        @* Or asp-action="AddToCart" *@
        <input type="hidden" asp-for="ProductId" value="@Model.Product.Id" />

        <div class="row g-4">
            @* --- Left Column: Image Gallery --- *@
            <div class="col-lg-6">
                <div class="product-gallery mb-3">
                    <img src="~/@Model.Product.Img" alt="@Model.Product.Name" class="img-fluid w-100" id="mainProductImage">
                </div>
            </div>

            @* --- Right Column: Product Info & Actions --- *@
            <div class="col-lg-6">
                @if (Model.Product.Category != null)
                {
                    <p class="text-muted small mb-1">@Model.Product.Category.Name</p>
                }
                <h1 class="h2 fw-bold mb-3">@Model.Product.Name</h1>

                <p class="product-price mb-2">$@String.Format("{0:N2}", Model.Product.Price)</p>

                @* Stock Status *@
                <div class="mb-3">
                    @if (Model.Product.CountInStock > 0)
                    {
                        <p class="stock-status in-stock mb-0">
                            <i class="fa-solid fa-check me-1"></i> In Stock (@Model.Product.CountInStock available)
                        </p>
                    }
                    else
                    {
                        <p class="stock-status out-of-stock mb-0">
                            <i class="fa-solid fa-xmark me-1"></i> Out of Stock
                        </p>
                    }
                </div>

           
                @if (Model.Product.CountInStock > 0)
                {
                    @* Quantity Selector *@
                    <div class="mb-4 d-flex align-items-center">
                        <label for="quantityInput" class="form-label fw-bold me-3 mb-0">Quantity:</label>
                        <div class="input-group" style="max-width: 130px;">
                            @* Slightly wider group *@
                            <button class="btn btn-outline-secondary" type="button" id="button-minus">-</button>
                            @* Bind this input to Model.Count *@
                            <input type="number" id="quantityInput" asp-for="Count" class="form-control quantity-input" value="1" min="1" max="@Model.Product.CountInStock" aria-label="Quantity">
                            <button class="btn btn-outline-secondary" type="button" id="button-plus">+</button>
                        </div>
                        @* Validation message for Count if needed *@
                        <span asp-validation-for="Count" class="text-danger ms-2"></span>
                    </div>

                    @* Action Buttons *@
                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary py-2 px-4 flex-grow-1">
                            <i class="fa-solid fa-cart-shopping me-2"></i>Add to Cart
                        </button>
                    </div>
                }
                else
                {
                    @* Show alternative if out of stock *@
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-secondary py-2 px-4 flex-grow-1" disabled>
                            <i class="fa-solid fa-cart-shopping me-2"></i>Out of Stock
                        </button>
                    </div>
                }

            </div> @* End Right Column *@
        </div> @* End Row g-4 *@
    </form> @* End Form *@

    @* --- Tabs Section --- *@
    <div class="row mt-5">
        <div class="col-12">
            <ul class="nav nav-tabs mb-3" id="productTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="description-tab" data-bs-toggle="tab" data-bs-target="#description-tab-pane" type="button" role="tab" aria-controls="description-tab-pane" aria-selected="true">Description</button>
                </li>
            </ul>
            <div class="tab-content" id="productTabContent">
                <div class="tab-pane fade show active" id="description-tab-pane" role="tabpanel" aria-labelledby="description-tab" tabindex="0">
                    <h5 class="fw-bold mb-3">Detailed Description</h5>
                    @* Render HTML description safely from the model *@
                    @Html.Raw(Model.Product.Description)

                    
                </div>
               
            </div>
        </div>
    </div>

</div> @* End Container py-5 *@

@section Scripts {
    <script>
        // Quantity Counter Logic
        const minusButton = document.getElementById('button-minus');
        const plusButton = document.getElementById('button-plus');
        const quantityInput = document.getElementById('quantityInput');

        if (minusButton && plusButton && quantityInput) {
             minusButton.addEventListener('click', () => {
                let currentValue = parseInt(quantityInput.value);
                let minValue = parseInt(quantityInput.min || "1");
                if (currentValue > minValue) {
                    quantityInput.value = currentValue - 1;
                }
            });

            plusButton.addEventListener('click', () => {
                let currentValue = parseInt(quantityInput.value);
                 let maxValue = parseInt(quantityInput.max || "999"); // Use max attribute
                 if(currentValue < maxValue) {
                      quantityInput.value = currentValue + 1;
                 }
            });

             // Ensure input value doesn't exceed max on manual input either
             quantityInput.addEventListener('change', () => {
                 let currentValue = parseInt(quantityInput.value);
                 let minValue = parseInt(quantityInput.min || "1");
                 let maxValue = parseInt(quantityInput.max || "999");
                 if (isNaN(currentValue) || currentValue < minValue) {
                     quantityInput.value = minValue;
                 } else if (currentValue > maxValue) {
                     quantityInput.value = maxValue;
                 }
             });
        }
    </script>
}